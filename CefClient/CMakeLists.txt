# cmake最低版本号
cmake_minimum_required(VERSION 3.15)


# QT5路径
set(QT_PATH "D:/Qt/Qt5.14.2/5.14.2/msvc2017_64")

set(TARGET "CefClient")
# 项目信息(名称、版本号、指定C++)
project(${TARGET}
    VERSION 0.0.1
    LANGUAGES CXX)
# 只生成 Release RelWithDebInfo
set(CMAKE_CONFIGURATION_TYPES Release RelWithDebInfo)


# 自动添加CMAKE_CURRENT_BINARY_DIR和CMAKE_CURRENT_SOURCE_DIR到当前处理的CMakeLists.txt
set(CMAKE_INCLUDE_CURRENT_DIR ON)

# 设置自动生成ui.h文件, AUTOUIC打开可以省去QT5_WRAP_UI命令
set(CMAKE_AUTOUIC ON)
# 设置自动生成moc文件,AUTOMOC打开可以省去QT5_WRAP_CPP命令
set(CMAKE_AUTOMOC ON)
# 将资源文件转化为二进制的rcc文件
set(CMAKE_AUTORCC ON)

# 指定C++版本号 11
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# 添加QT cmake路径
set(CMAKE_PREFIX_PATH "${QT_PATH}/lib/cmake/Qt5")
set(QT_QMAKE_EXECUTABLE "${QT_PATH}/lib/cmake")


# 使用解决方案文件夹打开
set_property(GLOBAL PROPERTY OS_FOLDERS ON)

# 设置ROOT目录
set(PROJECT_ROOT "${CMAKE_CURRENT_SOURCE_DIR}")

# 设置生成路径
set(PROJECT_BUILD "${CMAKE_BINARY_DIR}/build")
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BUILD}/RelWithDebInfo/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BUILD}/RelWithDebInfo/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELWITHDEBINFO ${PROJECT_BUILD}/RelWithDebInfo/lib)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BUILD}/Release/bin)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BUILD}/Release/lib)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_BUILD}/Release/lib)

# 加载cmake子模块
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} "${PROJECT_ROOT}/cmake")
find_package(CEF REQUIRED)
find_package(CefClientShare REQUIRED)
find_package(QHook REQUIRED)

# 加载子项目
add_subdirectory(CefClient_share)
add_subdirectory(CefClient_app)
add_subdirectory(CefClient_render)

# 拷贝bat
file(COPY ${PROJECT_ROOT}/cmd/ DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO} FOLLOW_SYMLINK_CHAIN)
file(COPY ${PROJECT_ROOT}/cmd/ DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE} FOLLOW_SYMLINK_CHAIN)

# 拷贝res
file(COPY ${PROJECT_ROOT}/res/ DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO} FOLLOW_SYMLINK_CHAIN)
file(COPY ${PROJECT_ROOT}/res/ DESTINATION ${CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE} FOLLOW_SYMLINK_CHAIN)

